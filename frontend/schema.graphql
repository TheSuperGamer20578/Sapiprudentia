schema {
  query: QueryRoot
  mutation: MutationRoot
}

type Assessment {
  due: NaiveDate
  duePeriod: DuePeriod!
  exam: Boolean!
  id: Int!
  issued: NaiveDate
  mark: Int
  markOutOf: Int
  notification: String
  reference: String
  status: AssessmentStatus!
  subject: Subject!
  submission: String
  title: String!
  weight: Int!
}

enum AssessmentStatus {
  FINISHED
  IN_PROGRESS
  NOT_ISSUED
  NOT_STARTED
  RESULTS_RECEIVED
}

enum DuePeriod {
  AS
  BS
  FOUR
  MIDNIGHT
  ONE
  RC
  THREE
  TWO
}

"""A scalar that can represent any JSON value."""
scalar JSON

type MutationRoot {
  """
  Creates a new note. Returns the newly created note.
  Requires authentication.
  """
  createNote(
    """The content of the note. Default: {"type": "doc", "content": []}"""
    content: JSON = null

    """The subject of the note. Default: null"""
    subject: Int = null

    """
    The title of the note. Default: ""
    """
    title: String! = ""
  ): Note!

  """
  Creates a new subject. Returns the newly created subject.
  Requires authentication.
  """
  createSubject(
    """Whether the subject is active. Default: true"""
    active: Boolean! = true

    """The class of the subject."""
    class: String!

    """The subject's Google Classroom ID. Default: null"""
    googleClassroomId: String = null

    """The name of the subject."""
    name: String!
  ): Subject!

  """
  Creates a new to-do. Returns the newly created to-do.
  Requires authentication.
  """
  createTodo(
    """The archived status of the to-do. Default: false"""
    archived: Boolean! = false

    """The completed status of the to-do. Default: false"""
    completed: Boolean! = false

    """The due date of the to-do. Default: null"""
    due: NaiveDate = null
    standing: Boolean! = false

    """The to-do's subject's ID. Default: null"""
    subject: Int = null

    """The title of the to-do."""
    title: String!
  ): Todo!

  """
  Get the current user for modification.
  Requires authentication.
  """
  currentUser: UserMutation!

  """
  Get a note for modification.
  Requires authentication.
  """
  note(
    """The ID of the note to modify."""
    id: Int!
  ): NoteMutation!

  """
  Get a subject for modification.
  Requires authentication.
  """
  subject(
    """The ID of the subject to modify."""
    id: Int!
  ): SubjectMutation!

  """
  Get a to-do for modification.
  Requires authentication.
  """
  todo(
    """The ID of the to-do to modify."""
    id: Int!
  ): TodoMutation!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

type Note {
  """The document’s content as understood by TipTap"""
  content: JSON!

  """The date of the note’s class"""
  date: NaiveDate!

  """The note’s ID"""
  id: Int!

  """The subject of the note."""
  subject: Subject

  """The note’s title"""
  title: String!
}

type NoteMutation {
  """Updates the note’s content. Returns the updated note."""
  content(
    """The new content of the note."""
    content: JSON
  ): Note!

  """Updates the note's date. Returns the updated note."""
  date(
    """The new date of the note."""
    date: NaiveDate
  ): Note!

  """Delete the note. Returns the deleted note."""
  delete: Note!

  """Updates the note's subject. Returns the updated note."""
  subject(
    """The new subject of the note."""
    subject: Int
  ): Note!

  """Updates the note's title. Returns the updated note."""
  title(
    """The new title of the note."""
    title: String!
  ): Note!
}

type QueryRoot {
  assessment(id: Int!): Assessment!
  assessments: [Assessment!]!

  """Get authenticated user data or null if not authenticated."""
  currentUser: User

  """
  Get a single note by ID.
  Requires authentication.
  """
  note(
    """The ID of the note to get."""
    id: Int!
  ): Note!

  """
  Get list of all notes owned by the authenticated user.
  Requires authentication.
  """
  notes: [Note!]!

  """
  Get a single subject by ID.
  Requires authentication.
  """
  subject(
    """The ID of the subject to get."""
    id: Int!
  ): Subject!

  """
  Get list of all subjects owned by the authenticated user.
  Requires authentication.
  """
  subjects: [Subject!]!

  """
  Get a single to-do by ID.
  Requires authentication.
  """
  todo(
    """The ID of the to-do to get."""
    id: Int!
  ): Todo!

  """
  Get list of all todos owned by the authenticated user.
  Requires authentication.
  """
  todos: [Todo!]!
}

type Session {
  """The date and time the session was created."""
  createdAt: NaiveDateTime!

  """The session ID."""
  id: Int!

  """The IP address of the last request made with this session."""
  ip: String

  """The date and time of the last request made with this session."""
  lastSeen: NaiveDateTime!

  """The user agent of the last request made with this session."""
  userAgent: String
}

type SessionMutation {
  """Revoke the session. Always returns true or an error."""
  delete: Boolean!
}

type Subject {
  """Whether the subject should appear in navigation."""
  active: Boolean!

  """The class of the subject."""
  class: String!

  """The Google Classroom ID of the subject."""
  googleClassroomId: String

  """The ID of the subject."""
  id: Int!

  """The name of the subject."""
  name: String!
}

type SubjectMutation {
  """
  Updates the active status of the subject. Returns the updated subject.
  Active subjects are shown in the navigation.
  """
  active(
    """The new active status of the subject."""
    active: Boolean!
  ): Subject!

  """Updates the subject's class. Returns the updated subject."""
  class(
    """The new class of the subject."""
    class: String
  ): Subject!

  """Delete the subject. Always returns true or an error."""
  delete: Boolean!

  """
  Updates the subject's Google Classroom ID. Returns the updated subject.
  """
  googleClassroomId(
    """The new Google Classroom ID of the subject."""
    googleClassroomId: String
  ): Subject!

  """Updates the subject's name. Returns the updated subject."""
  name(
    """The new name of the subject."""
    name: String!
  ): Subject!
}

type Todo {
  """
  Whether the to-do is archived.
  Archived todos are hidden from the default view.
  """
  archived: Boolean!

  """The children of the to-do."""
  children: [Todo!]!

  """Whether the to-do is completed."""
  completed: Boolean!

  """The due date of the to-do."""
  due: NaiveDate

  """The ID of the to-do."""
  id: Int!

  """The parent of the to-do."""
  parent: Todo
  standing: Boolean!

  """The subject of the to-do."""
  subject: Subject

  """The title of the to-do."""
  title: String!
}

type TodoMutation {
  """
  Updates the to-do's archived status. Returns the updated to-do.
  Archived to-dos are hidden from the default view.
  Does nothing if the to-do is a child.
  """
  archived(
    """The new archived status."""
    archived: Boolean!
  ): Todo!

  """Updates the to-do's completed status. Returns the updated to-do."""
  completed(
    """The new completed status."""
    completed: Boolean!
  ): Todo!

  """
  Creates a child to-do. Returns the newly created to-do.
  Requires authentication.
  """
  createChild(
    """The completed status of the to-do. Default: false"""
    completed: Boolean! = false

    """The due date of the to-do. Default: null"""
    due: NaiveDate = null

    """The title of the to-do."""
    title: String!
  ): Todo!

  """
  Delete the to-do. Returns the deleted to-do.
  Also deletes children.
  """
  delete: Todo!

  """Updates the to-do's due date. Returns the updated to-do."""
  due(
    """The new due date."""
    due: NaiveDate
  ): Todo!

  """Changes the to-do's parent. Returns the updated to-do."""
  parent(
    """The new parent's ID."""
    id: Int
  ): Todo!
  standing(standing: Boolean!): Todo!

  """Updates the to-do's subject. Returns the updated to-do."""
  subject(
    """The new subject's ID."""
    id: Int
  ): Todo!

  """Updates the to-do's title. Returns the updated to-do."""
  title(
    """The new title."""
    title: String!
  ): Todo!
}

type User {
  """The date and time the user was created."""
  createdAt: NaiveDateTime!

  """The email address of the user."""
  email: String!

  """The user ID."""
  id: Int!

  """The name used in the UI."""
  name: String!

  """Weather the user is required to change their password on next login."""
  requirePasswordChange: Boolean!

  """Get a single session by ID."""
  session(id: Int!): Session!

  """List of all active sessions for the user."""
  sessions: [Session!]!

  """The unique username used for login."""
  username: String!
}

type UserMutation {
  """Delete the user. Always returns true or an error."""
  delete: Boolean!

  """Updates the user's email. Returns the updated user."""
  email(
    """The new email of the user."""
    email: String!
  ): User!

  """Updates the user's name. Returns the updated user."""
  name(
    """The new name of the user."""
    name: String!
  ): User!

  """Updates the user's password. Returns the updated user."""
  password(
    """The new password of the user."""
    password: String!
  ): User!

  """Get a session for modification."""
  session(
    """The ID of the session to modify."""
    id: Int!
  ): SessionMutation!

  """Updates the user's username. Returns the updated user."""
  username(
    """The new username of the user."""
    username: String!
  ): User!
}
